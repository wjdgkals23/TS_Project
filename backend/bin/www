#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var conn = require('../config/db')();

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Setting Socket.io
 */
var io = require('socket.io').listen(server);

io.sockets.on('connection',(socket)=>{
    socket.on("login", (data)=>{
        console.log(socket.id, data);
        if(data.superuser == 0){
            var sql = "SELECT A.*, B.* FROM ts.doc as A LEFT OUTER JOIN (SELECT * FROM ts.doctype) as B on (A.doctype = B.id)"
                +"WHERE A.user_id = " + data.id + ";"
            conn.query(sql, function(err, results){
              if(err){
                console.log("login_error");
                console.log(err);
              }
              else{
                var result = {
                    name: "User",
                    doc: results,
                    userid: data.userid
                }
                socket.emit("login", result);
              }
            });
        }
        else {
            var sql = "SELECT * FROM ts.doctype WHERE company = " + data.belong + ";" +
                "SELECT * FROM ts.user WHERE superuser = 0 and belong = " + data.belong + "; SELECT * FROM ts.belong WHERE id = " + data.belong + ";"
            conn.query(sql, function(err, results){
                if(err){
                    console.log("login_error");
                    console.log(err);
                }
                else{
                    var result = {
                        name: "SuperUser",
                        doc: results[0],
                        userid: data.userid,
                        userdata: results[1],
                        belong: results[2]
                    }
                    socket.emit("login", result);
                }
            });
            socket.emit("login", "complete");
        }
    })
    socket.on("adddoc", (data)=>{
        conn.query(data.sql, function(err, results1){
            if(err){
                console.log("add_error");
                console.log(err);
            }
            else{
                console.log(results1);
                let sql = "SELECT * FROM ts.doctype WHERE company = " + data.belong + ";";
                conn.query(sql, function(err, results2){
                    if(err){
                        console.log("add_error");
                        console.log(err);
                    }
                    else{
                        console.log(results2);
                        socket.emit("adddoc", results2);
                    }
                })
            }
        })
    });
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
